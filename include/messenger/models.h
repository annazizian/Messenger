// generated by /usr/local/bin/sqlpp11-ddl2cpp messenger.ddl include/messenger/models messenger
#ifndef MESSENGER_MODELS_H
#define MESSENGER_MODELS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace messenger
{
  namespace User_
  {
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
    struct PrivateGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "private_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T privateGuid;
            T& operator()() { return privateGuid; }
            const T& operator()() const { return privateGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace User_

  struct User: sqlpp::table_t<User,
               User_::Username,
               User_::Status,
               User_::PrivateGuid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "User";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T User;
        T& operator()() { return User; }
        const T& operator()() const { return User; }
      };
    };
  };
  namespace Message_
  {
    struct MessageGUID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "messageGUID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T messageGUID;
            T& operator()() { return messageGUID; }
            const T& operator()() const { return messageGUID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct SenderUsername
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sender_username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T senderUsername;
            T& operator()() { return senderUsername; }
            const T& operator()() const { return senderUsername; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct RecieverUsername
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reciever_username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recieverUsername;
            T& operator()() { return recieverUsername; }
            const T& operator()() const { return recieverUsername; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Content
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T content;
            T& operator()() { return content; }
            const T& operator()() const { return content; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isGroup;
            T& operator()() { return isGroup; }
            const T& operator()() const { return isGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
  } // namespace Message_

  struct Message: sqlpp::table_t<Message,
               Message_::MessageGUID,
               Message_::SenderUsername,
               Message_::RecieverUsername,
               Message_::Content,
               Message_::Timestamp,
               Message_::IsGroup>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "message";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T message;
        T& operator()() { return message; }
        const T& operator()() const { return message; }
      };
    };
  };
  namespace Groups_
  {
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct GroupName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupName;
            T& operator()() { return groupName; }
            const T& operator()() const { return groupName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct CreateDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "createDate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createDate;
            T& operator()() { return createDate; }
            const T& operator()() const { return createDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsActive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isActive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isActive;
            T& operator()() { return isActive; }
            const T& operator()() const { return isActive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
  } // namespace Groups_

  struct Groups: sqlpp::table_t<Groups,
               Groups_::GroupId,
               Groups_::GroupName,
               Groups_::CreateDate,
               Groups_::IsActive>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "groups";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T groups;
        T& operator()() { return groups; }
        const T& operator()() const { return groups; }
      };
    };
  };
  namespace UserGroup_
  {
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace UserGroup_

  struct UserGroup: sqlpp::table_t<UserGroup,
               UserGroup_::Username,
               UserGroup_::GroupId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "user_group";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T userGroup;
        T& operator()() { return userGroup; }
        const T& operator()() const { return userGroup; }
      };
    };
  };
} // namespace messenger
#endif
